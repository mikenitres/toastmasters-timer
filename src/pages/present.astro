---
import "../styles/present.css";
import toastmastersLogoMetaImage from "../assets/toatmasters_logo_meta_tag.png";
---

<html lang="en">
    <head>
        <title>Presentation Display | Toastmasters Timer for Timers</title>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <link rel="canonical" href="https://tmtimer.mikenitres.com/present" />
        <meta property="og:type" content="website" />
        <meta
            name="apple-mobile-web-app-title"
            content="Presentation Display | Toastmasters Timer for Timers"
        />
        <meta
            property="og:site_name"
            content="Presentation Display | Toastmasters Timer for Timers"
        />
        <meta
            property="og:title"
            content="Presentation Display | Toastmasters Timer for Timers"
        />
        <meta
            name="twitter:title"
            content="Presentation Display | Toastmasters Timer for Timers"
        />
        <meta
            property="og:image:alt"
            content="The presentation display page for Toastmasters Timer for Timers. Secondary screen used to share over online meeting applications like Zoom or Teams and displayed on screen for in-person meetings."
        />
        <meta
            name="description"
            property="og:description"
            content="The presentation display page for Toastmasters Timer for Timers. Secondary screen used to share over online meeting applications like Zoom or Teams and displayed on screen for in-person meetings."
        />
        <meta
            name="twitter:description"
            content="The presentation display page for Toastmasters Timer for Timers. Secondary screen used to share over online meeting applications like Zoom or Teams and displayed on screen for in-person meetings."
        />
        <meta property="og:image" content={toastmastersLogoMetaImage.src} />
        <meta
            name="twitter:image:src"
            content={toastmastersLogoMetaImage.src}
        />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="author" content="Mike Nitres" />
        <meta name="copyright" content="Copyright Â© 2025 Mike Nitres." />
        <link rel="sitemap" href="/sitemap-index.xml" />
    </head>
    <body>
        <input
            type="text"
            class="keyboard-listener"
            id="keyboardListener"
            aria-hidden="true"
            tabindex="-1"
        />
        <div class="present-display bg-white" id="presentDisplay"></div>
        <script>
            // State management
            let colorCyclingEnabled = true;
            let canTransition = true;
            const colors = ["white", "green", "yellow", "red"];
            let currentColorIndex = 0;
            const presentDisplay = document.getElementById("presentDisplay");
            const keyboardListener =
                document.getElementById("keyboardListener");
            keyboardListener.focus();

            document.addEventListener("keydown", (e) => {
                if (!canTransition) return;
                setTimeout(function () {
                    canTransition = true;
                }, 250);
                if (
                    e.code === "Space" ||
                    e.code === "ArrowRight" ||
                    e.key.toLowerCase() === "d" ||
                    e.code === "ArrowLeft" ||
                    e.key.toLowerCase() === "a"
                ) {
                    e.preventDefault();
                    if (
                        e.code === "Space" ||
                        e.code === "ArrowRight" ||
                        e.key.toLowerCase() === "d"
                    ) {
                        handleColorCycle();
                    } else {
                        handleColorCycleReverse();
                    }
                }
                canTransition = false;
            });

            const myTap = window.ontouchstart === null ? "touchend" : "click";
            presentDisplay.addEventListener(myTap, () => {
                if (!canTransition) return;
                setTimeout(function () {
                    canTransition = true;
                }, 250);
                handleColorCycle();
                canTransition = false;
            });

            // Handlers for manual cycling when going through rules to speaker
            function handleColorCycle() {
                if (!colorCyclingEnabled) return;
                currentColorIndex = (currentColorIndex + 1) % colors.length;
                updateDisplay(colors[currentColorIndex]);
                updateLocalStorage(colors[currentColorIndex]);
            }

            function handleColorCycleReverse() {
                if (!colorCyclingEnabled) return;
                currentColorIndex =
                    (currentColorIndex - 1 + colors.length) % colors.length;
                updateDisplay(colors[currentColorIndex]);
                updateLocalStorage(colors[currentColorIndex]);
            }

            // Display update helper
            function updateDisplay(color) {
                presentDisplay.className = `present-display bg-${color}`;
            }

            function updateLocalStorage(color) {
                const savedState =
                    JSON.parse(localStorage.getItem("toastmastersTimer")) || {};
                savedState.currentColor = color;
                localStorage.setItem(
                    "toastmastersTimer",
                    JSON.stringify(savedState),
                );
            }

            // Polling for timer updates
            setInterval(() => {
                const savedState =
                    JSON.parse(localStorage.getItem("toastmastersTimer")) || {};
                // Disable color cycling if timer is running
                colorCyclingEnabled =
                    savedState.elapsedTime == null ||
                    savedState.elapsedTime == 0;
                // If timer is controlling colors, update display and reset color index to 0
                if (!colorCyclingEnabled) {
                    currentColorIndex = 0;
                }
                if (currentColorIndex == 0) {
                    updateDisplay(savedState.currentColor || "white");
                }
            }, 250);

            updateDisplay("white");
        </script>
    </body>
</html>
